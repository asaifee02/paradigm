name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1
  GKE_CLUSTER: paradigm
  GKE_ZONE: us-central1-c
  DEPLOYMENT_NAME: gke-test
  REPOSITORY: paradigm

jobs:
  Setup-Build-Publish:
    name: Setup, Build and Publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend, model]

    permissions:
      contents: 'read'
      id-token: 'write'
      security-events: write
      actions: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GKE_SA_KEY }}'

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication (https://cloud.google.com/artifact-registry/docs/docker/authentication)
    - name: Docker configuration
      run: |-
        gcloud --quiet auth configure-docker $GAR_LOCATION-docker.pkg.dev
        
    # Build the Docker image
    - name: Build
      run: |-
        docker build ${{ matrix.component }} --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ matrix.component }}:latest"

    - name: Scan the image and upload dependency results
      uses: anchore/sbom-action@bb716408e75840bbb01e839347cd213767269d4a
      with:
        image: "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.component }}:latest"
        artifact-name: ${{ matrix.component }}.spdx.json
        output-file: "${{ matrix.component }}.sbom.json"

    - name: Run the Anchore Grype scan action
      uses: anchore/scan-action@d5aa5b6cb9414b0c7771438046ff5bcfa2854ed7
      id: scan
      with:
        sbom: "${{ matrix.component }}.sbom.json"
        output-format: "table"
        fail-build: false

    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ matrix.component }}:latest"

  SignImage-and-AttachAttestation:
    runs-on: ubuntu-latest
    needs: Setup-Build-Publish
    strategy:
      matrix:
        component: [frontend, backend, model]
    
    permissions:
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Syft and Cosign
      run: |
        echo "::group::Installation Logs"
        sudo curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v0.65.0
        wget -q https://github.com/sigstore/cosign/releases/download/v1.13.1/cosign_1.13.1_amd64.deb
        sudo dpkg -i cosign_1.13.1_amd64.deb
        echo "::endgroup::"
  
      # Authentication via credentials json
    - uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GKE_SA_KEY }}'

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication (https://cloud.google.com/artifact-registry/docs/docker/authentication)
    - name: Docker configuration
      run: |-
        gcloud --quiet auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Attach Attestation and Sign Image
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "::group::Attaching Attestation and Signature"
        syft attest -o spdx-json -s AllLayers $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ matrix.component }}:latest
        cosign sign -y --k8s-keychain --force $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ matrix.component }}:latest
        echo "::endgroup::"

    - name: Verify Image and SBOM Attestation Signatures
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "::group::Verifying Attestation and Signature"
        cosign verify-attestation --type spdxjson $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ matrix.component }}:latest | jq .signatures -
        cosign verify $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ matrix.component }}:latest | jq . -
        echo "::endgroup::"

  Deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: SignImage-and-AttachAttestation

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GKE_SA_KEY }}'

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        kubectl apply -f k8s
        kubectl rollout status deployment
        kubectl get services -o wide
        kubectl get ing -o wide
